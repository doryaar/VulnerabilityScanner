import { Checker } from "../src/model/Checker";

const session = require('request-promise').defaults({ jar: true });

const owaspbwaIp = '';

const xssSample = '<ScriPt>alert(1)<scRIpt>';
const vulnerableLink = owaspbwaIp.concat('dvwa/vulnerabilities/xss_r/?name=test#');
const inVulnerableLink = owaspbwaIp.concat('dvwa/vulnerabilities/brute/?username=asd&password=asd&Login=Login#');
const vulnerableForm = owaspbwaIp.concat('dvwa/vulnerabilities/xss_r/?name=test#');

const loginToDvwa = async () => {
  const dvwaUrl = owaspbwaIp.concat('dvwa/');
    await session.post({
      url: dvwaUrl + 'login.php',
      form: { username: 'admin', password: 'admin', Login: 'Login' },
      simple: false,
      followAllRedirects: true,
      resolveWithFullResponse: true,
    });
  return new Checker(session);
}

describe('Checker test:', () => {
  test('Checker instance creation', () => {
    const checker = new Checker(session);
    expect(checker).toBeInstanceOf(Checker);
  });
  test('True xss in url params', async () => {
    const checker = await loginToDvwa();
    const isVulnerableUrl = await checker.checkXssInLink(vulnerableLink, xssSample)
    expect(isVulnerableUrl).toBe(true);
  });
  test('False xss in url params', async () => {
    const checker = await loginToDvwa();
    const isVulnerableUrl = await checker.checkXssInLink(inVulnerableLink, xssSample)
    expect(isVulnerableUrl).toBe(false);
  });
  test('True xss in form', async () => {
    const checker = await loginToDvwa();
    const form = await checker.scraper.extractFormsFrom(vulnerableForm);
    const isVulnerableForm = await checker.checkXssInForm(form[0] ,vulnerableForm, xssSample)
    expect(isVulnerableForm).toBe(true);
  });
});
