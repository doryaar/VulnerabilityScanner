const cheerio = require('cheerio').default;

import { Requester } from './Requester';

export class Scraper {
  
  requester: Requester;

  constructor(session: any) {
    this.requester = new Requester(session);
  }

  async get(url: string): Promise<string> {
    return await this.requester.request(url);
  }

  async extractLinksFrom(url: string): Promise<string[]> {
    return await this.scrap(url, 'a');
  }

  async extractFormsFrom(url: string): Promise<string[]> {
    return await this.scrap(url, 'form');
  }
  
  async scrap(url: string, element: string): Promise<string[]> {
    const response = await this.requester.request(url, 'GET');
    const elements = await this.getAll(response, element);
    return elements;
  }
  
  async getAll(html: string, elements: string) {
    const results: string[] = [];
    const $ = cheerio.load(html);
    for (const element of $(elements)) {    
      if (elements === 'a') results.push($($.html(element)).attr('href')); 
      else results.push($.html(element));
    }
    return results;
  }

  createDataRequestForm(form: string, input: string) {
    const maxInputFields = 10;
    const $ = cheerio.load(form);
    const postData: any = [];
    let method = 'GET';
    cheerio.load(form)('input').each((index: number, element: string) => {
        if (index > maxInputFields) return;
        const inputName = $(element).attr('name');
        method = $(element).attr('method') || method;
        let inputValue = $(element).attr('value');
        const type = $(element).attr('type');
        if (type === 'text') {
          inputValue = input;
        }
        if (type === 'submit') {
          postData['submit'] = inputValue;
          return;
        }
        postData[inputName] = inputValue;
      });

      return { method: method , data: postData };
  }

  fetchFormAction(form: string, url: string) {
    const $ = cheerio.load(form);
    const action = $(form).attr('action');
    if (action === '#') {
      return url;
    } else {
      return new URL(action, url).href;
    }
  }

  async submitForm(form: string, input: string, url: string) {
    const postUrl = this.fetchFormAction(form, url);
    const { method, data } = this.createDataRequestForm(form, input);
    const response = await this.requester.request(postUrl, method, data);
    return response;
  }
}