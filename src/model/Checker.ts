import { VulnerabilityService } from "../types/VulnerabilityService";
import { Scraper } from "./Scraper";

export class Checker {

  private scraper: Scraper;
  
  constructor(session: any, private vulnerabilityService : VulnerabilityService) {
    this.scraper = new Scraper(session);
  }

  async checkXssInForm(form: string, url: string, xss: string): Promise<boolean> {
    const response = await this.scraper.submitForm(form, xss, url);
    return this.isXssInResponse(response, xss);
  }
  
  async checkXssInLink(url: string, xss: string): Promise<boolean> {
    const link = url.replace('=', `=${xss}`);
    const response = await this.scraper.get(link);
    return this.isXssInResponse(response, xss);
  }

  async checkVulnerabilityInForm(form: string, url: string, vulnerabilityInput: string): Promise<boolean> {
    const response = await this.scraper.submitForm(form, vulnerabilityInput, url);
    return this.isXssInResponse(response, vulnerabilityInput);
  }

  async checkVulnerabilitiesInForm(form: string, url: string) {
    const vulnerabilityTestResults = [];
    const vulnerabilities = this.vulnerabilityService.getVulnerabilities();
    for (const v of vulnerabilities) {
      const res = await this.checkVulnerabilityInForm(form, url, v.payload);
      if (res) vulnerabilityTestResults.push(v);
    }
    return vulnerabilityTestResults;
  }

  isXssInResponse(response: string, xss: string): boolean {
    if (response) {
      return response.includes(xss);
    }
    else return false;
  }
}