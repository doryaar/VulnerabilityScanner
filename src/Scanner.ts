const session = require('request-promise').defaults({ jar: true });
const fs = require('fs');

import { Spider } from './model/Spider';
import { Checker } from './model/Checker';
import { VulnerabilityService } from './types/VulnerabilityService';
import { Vulnerability } from './types/Vulnerability';

export class Scanner {
  spider: Spider;
  checker: Checker;
  results: Record<string, Array<Vulnerability>> = {};
  
  constructor(targetUrl: string, session: any, vulnerabilityService: VulnerabilityService) {
    this.spider = new Spider(targetUrl, session);
    this.checker = new Checker(session, vulnerabilityService);
  }
  
  filterResults() {
    const reportData: Record<string, Array<Vulnerability>> = {};
    for (const link in this.results) {
      if (this.results[link][0]) reportData[link] = [...this.results[link]];
    }
    this.results = reportData;
  }
  
  writeToFile() {
    this.filterResults();
    fs.writeFileSync('vulnerability-report.json', JSON.stringify(this.results, null, 2));
  }

  async scan() {
    const targetLinks = await this.spider.crawl();
    for (const link of targetLinks) {
      const forms = await this.spider.scraper.extractFormsFrom(link);
      for (const form of forms) {
        // Insert Here Tests for form:
        const vulnerabilitiesDetected = await this.checker.checkVulnerabilitiesInForm(form, link);
        if (vulnerabilitiesDetected[0] && vulnerabilitiesDetected[0].name) {
          if (!this.results[link]) {
            this.results[link] = [];
          }
          this.results[link].push(...vulnerabilitiesDetected);
        }
      }
      
      if (link.includes('=')) {
        // Insert Here url Tests:
      }
    }
    this.writeToFile();
  }
}